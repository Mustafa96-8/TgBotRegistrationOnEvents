// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramBot.Domain;

#nullable disable

namespace TelegramBot.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250206174914_ChangeToCollections")]
    partial class ChangeToCollections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("EventUserProfile", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserProfilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventsId", "UserProfilesId");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("EventUserProfile");
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("AdminProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfileId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastProfileMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.AdminProfile", b =>
                {
                    b.HasBaseType("TelegramBot.Domain.Entities.Person");

                    b.Property<int>("AdminState")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CurrentEvent")
                        .HasColumnType("TEXT");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.UserProfile", b =>
                {
                    b.HasBaseType("TelegramBot.Domain.Entities.Person");

                    b.Property<bool>("HeIsEighteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserState")
                        .HasColumnType("INTEGER");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("EventUserProfile", b =>
                {
                    b.HasOne("TelegramBot.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramBot.Domain.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.Event", b =>
                {
                    b.HasOne("TelegramBot.Domain.Entities.AdminProfile", null)
                        .WithMany("NotificationList")
                        .HasForeignKey("AdminProfileId");
                });

            modelBuilder.Entity("TelegramBot.Domain.Entities.AdminProfile", b =>
                {
                    b.Navigation("NotificationList");
                });
#pragma warning restore 612, 618
        }
    }
}
